<script type='text/jsx'>
  /** @jsx React.DOM */
 //<![CDATA[

 var FileTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'file_name',
            content: '<%= j raw I18n.t(:'browse_submissions.filename') %>',
            sortable: true,
            searchable: true
          },
          {
            id: 'last_modified_data',
            content: '<%= j raw I18n.t(:'browse_submissions.last_revised') %>',
            sortable: true
          },
          {
            id: 'revision_by',
            content: '<%= j raw I18n.t(:'browse_submissions.revised_by') %>',
            sortable: true
          },
          {
            id: 'replace',
            content: '<%= j raw I18n.t(:'browse_submissions.replace') %>',
            sortable: true
          },
          {
            id: 'delete_file',
            content: '<%= j raw I18n.t(:'browse_submissions.delete') %>',
            sortable: true
          }
        ]
      };
    },
    getInitialState: function() {
      return {
        error: null,
        files: [],
        selected_files: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },

    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';

      jQuery.ajax({
      	url: 'file_manager',
        method: 'GET',
        dataType: 'json',
        success: function(files) {
          this.setState({
            files: data,
            error: null
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this),
        // Close working indicator.
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    onError: function(error) {
      this.setState({error: error});
    },
    render: function() {
      var file_data = this.state.files.map(function(file) {
      	var f = {};

        f['id'] = file.id;
	f['file_name'] = file.file_name;
	f['last_modified_date'] = file.last_modified_date;
	f['revision_by'] = file.revision_by;
	f['replace'] = file.replace;
	f['delete_file'] = file.delete_file;	
	
        return f;
	}.bind(this));
	
	return (
	<div>
		<FileActionBox/>	
	        <Table data={file_data}
		  columns={this.props.columns}
	 	/>
	 </div>
	);
    }
  });

  var FileActionBox = React.createClass({ 
     getInitialState: function(){
     return{liked:false};
    },
     handleClick: function(event){
     this.set.state({liked: !state.liked})
     },
    render: function(){
	return(      
	  <div className = 'react-buttons'>	
	  <button onClick={injectFileInput}>
	   		<%= j raw I18n.t('add_new')%>
	   	</button>
		<button onClick={<%='set_onbeforeunload(false)'%>}>
	 		<%= j raw I18n.t(:submit)%>
	 	</button>
	   	<button onClick={this.handleClick}>
	   		<%= j raw I18n.t(:cancel)%>
	   	</button>
	  </div>
	);
     }
    });

React.renderComponent(<FileTable/>, document.getElementById('file_table'));
</script>

<script type = "text/javascript">

  /*
 * Do the same as what would be done server side in terms
 * of filename sanitation. Warn the user what would happen
 * if submit is pressed.
 * See also: public/javascripts/file_manager.js
 */
function sanitized_filename_check(file_input) {
  file_name = file_input.value.replace(/^.*[\\\/]/, '');
  sanitized_filename = file_name.replace(/<%= SubmissionFile::FILENAME_SANITIZATION_REGEXP.source %>/g,
  "<%= SubmissionFile::SUBSTITUTION_CHAR %>");
  if (file_name != sanitized_filename) {
    msg = <%=raw( I18n.t('student.submission.filename_sanitization_js_warning') )%>;
    if( !confirm(msg) ) {
      $(file_input).setValue('');
    };
  }
}

/*
 * Check that new_file_name is the same as file_name. Otherwise
 * refuse to accept the new filename. Note that this is called
 * on the replace file upload button.
 * See also: public/javascripts/file_manager.js
 */
function check_change_of_filename(file_name, new_file_name, file_input) {
  new_file_name = normalize_filename(new_file_name);
  if(file_name != new_file_name) {
    alert(<%=raw( I18n.t('student.submission.replace_file_js_error') )%>);
    $(file_input).setValue('');
  }
}
  
  
//]]>
</script>

