<script type='text/jsx'>
  /** @jsx React.DOM */

  var FileTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'file_name',
            content: '<%= j raw I18n.t(:'browse_submissions.filename') %>',
            sortable: true,
            searchable: true
          },
          {
            id: 'last_modified_data',
            content: '<%= j raw I18n.t(:'browse_submissions.last_revised') %>',
            sortable: true
          },
          {
            id: 'revision_by',
            content: '<%= j raw I18n.t(:'browse_submissions.revised_by') %>',
            sortable: true
          },
          {
            id: 'replace',
            content: '<%= j raw I18n.t(:'browse_submissions.replace') %>',
            sortable: true
          },
          {
            id: 'delete_file',
            content: '<%= j raw I18n.t(:'browse_submissions.delete') %>',
            sortable: true
          }
        ]
      };
    },
    getInitialState: function() {
      return {
        error: null,
        files: [],
        selected_files: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },

    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: 'populate_file_manager_assignment_submissions_path',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            files: data,
            error: null
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this),
        // Close working indicator.
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    onError: function(error) {
      this.setState({error: error});
    },
    render: function() {
      var file_data = this.state.files.map(function() {
        var f = {};
        return f;
      }.bind(this));
	
      	return (
	<div>
	<Table data={file_data}
	columns={this.props.columns}
	 />
	 </div>
	);
    }
  });

  React.renderComponent(<FileTable />, document.getElementById('file_table'));
</script>
